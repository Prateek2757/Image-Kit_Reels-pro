import { Iimage } from "./../model/Image";
import { IVideo } from "@/model/Video";

interface imagekit {
  token: string;
  expire: number;
  signature: string;
}

// ✅ Instead of "any", define the data shape for creating new entries
// Omit the `_id` because it's usually generated by the DB/backend
export type ImageFormData = Omit<Iimage, "_id">;
export type VideoFormData = Omit<IVideo, "_id">;

type FetchOptions<T = unknown> = {
  method?: "GET" | "POST" | "PUT" | "DELETE";
  body?: T;
  headers?: Record<string, string>;
};

class ApiClient {
  private async fetch<TResponse, TBody = unknown>(
    endpoint: string,
    options: FetchOptions<TBody> = {}
  ): Promise<TResponse> {
    const { method = "GET", body, headers = {} } = options;

    const defaultHeaders = {
      "Content-Type": "application/json",
      ...headers,
    };

    const response = await fetch(`/api${endpoint}`, {
      method,
      headers: defaultHeaders,
      body: body ? JSON.stringify(body) : undefined,
    });

    if (!response.ok) {
      throw new Error(await response.text());
    }

    return response.json();
  }

  async getVideos() {
    return this.fetch<IVideo[]>("/videos");
  }

  async imageauth() {
    return this.fetch<imagekit>("/imagekit-auth");
  }

  async getVideo(userId: string) {
    return this.fetch<IVideo[]>(`/video/${userId}`);
  }

  async getImage() {
    return this.fetch<Iimage[]>("/images");
  }

  // ✅ Use proper type instead of `any`
  async createImage(imageData: ImageFormData) {
    return this.fetch<Iimage, ImageFormData>("/images", {
      method: "POST",
      body: imageData,
    });
  }

  async createVideo(videoData: VideoFormData) {
    return this.fetch<IVideo, VideoFormData>("/videos", {
      method: "POST",
      body: videoData,
    });
  }

  async deleteMedia(id: string, type: string) {
    return this.fetch<{ success: boolean }, { id: string; type: string }>("/videos", {
      method: "DELETE",
      body: { id, type },
    });
  }
}

export const apiClient = new ApiClient();